@page "/courses/create"
@using Microsoft.EntityFrameworkCore
@using Hogwarts
@inject IDbContextFactory<HogwartsWeb.Data.HogwartsWebContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Course</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Course" OnValidSubmit="AddCourse" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="coursename" class="form-label">CourseName:</label> 
                <InputText id="coursename" @bind-Value="Course.CourseName" class="form-control" /> 
                <ValidationMessage For="() => Course.CourseName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label> 
                <InputText id="description" @bind-Value="Course.Description" class="form-control" /> 
                <ValidationMessage For="() => Course.Description" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="professorid" class="form-label">ProfessorId:</label> 
                <InputSelect id="professor"
                             @bind-Value="Course.ProfessorId"
                             class="form-control">
                    <option value="">-- Select a Professor --</option>
                    @foreach (var prof in Professors)
                    {
                        <option value="@prof.ProfessorId">@prof.FirstName</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Course.ProfessorId" class="text-danger" /> 
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/courses">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Course Course { get; set; } = new();
    private List<Professor> Professors { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Professors = await context.Professor
                                  .OrderBy(p => p.FirstName)
                                  .ToListAsync();
    }

    private async Task AddCourse()
    {
        using var context = DbFactory.CreateDbContext();
        context.Course.Add(Course);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/courses");
    }
}
