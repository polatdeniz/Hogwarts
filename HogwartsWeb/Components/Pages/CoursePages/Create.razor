@page "/courses/create"
@using Microsoft.EntityFrameworkCore
@using AbdHogwarts
@inject IDbContextFactory<HogwartsWeb.Data.HogwartsWebContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create Course</PageTitle>

<div class="page-container">
    <h1 class="page-title">Create Course</h1>

    <EditForm method="post" Model="Course" OnValidSubmit="AddCourse" FormName="create" Enhance>
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />

        <div class="mb-3">
            <label for="coursename" class="form-label">Course Name:</label>
            <InputText id="coursename" @bind-Value="Course.CourseName" class="form-control" />
            <ValidationMessage For="() => Course.CourseName" class="text-danger" />
        </div>

        <div class="mb-3">
            <label for="description" class="form-label">Description:</label>
            <InputText id="description" @bind-Value="Course.Description" class="form-control" />
            <ValidationMessage For="() => Course.Description" class="text-danger" />
        </div>

        <div class="mb-3">
            <label for="professorid" class="form-label">Professor:</label>
            <InputSelect id="professor"
                         @bind-Value="Course.ProfessorId"
                         class="form-control">
                <option value="">-- Select a Professor --</option>
                @foreach (var prof in Professors)
                {
                    <option value="@prof.ProfessorId">@prof.FirstName</option>
                }
            </InputSelect>
            <ValidationMessage For="() => Course.ProfessorId" class="text-danger" />
        </div>

        <button type="submit" class="btn-create">Create</button>
    </EditForm>

    <div class="mt-3">
        <a href="/courses" class="btn btn-secondary">Back to List</a>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private Course Course { get; set; } = new();
    private List<Professor> Professors { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Professors = await context.Professor.OrderBy(p => p.FirstName).ToListAsync();
    }

    private async Task AddCourse()
    {
        using var context = DbFactory.CreateDbContext();
        context.Course.Add(Course);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/courses");
    }
}
