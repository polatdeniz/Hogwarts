@page "/courses/delete"
@using Microsoft.EntityFrameworkCore
@using dnzHogwards
@inject IDbContextFactory<HogwartsWeb.Data.HogwartsWebContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete Course</PageTitle>

<div class="page-container">
    <h1 class="page-title">Delete Course</h1>

    <p>Are you sure you want to delete this course?</p>
    <hr />

    @if (course is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-3">Course Name:</dt>
            <dd class="col-sm-9">@course.CourseName</dd>

            <dt class="col-sm-3">Description:</dt>
            <dd class="col-sm-9">@course.Description</dd>

            <dt class="col-sm-3">Professor:</dt>
            <dd class="col-sm-9">@course.Professor.FirstName @course.Professor.LastName</dd>
        </dl>

        <EditForm method="post" Model="course" OnValidSubmit="DeleteCourse" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger me-2" disabled="@(course is null)">Delete</button>
            <a href="/courses" class="btn btn-secondary">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Course? course;

    [SupplyParameterFromQuery]
    private int CourseId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        course = await context.Course
                              .Include(c => c.Professor)
                              .FirstOrDefaultAsync(c => c.CourseId == CourseId);

        if (course is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteCourse()
    {
        using var context = DbFactory.CreateDbContext();
        context.Course.Remove(course!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/courses");
    }
}
