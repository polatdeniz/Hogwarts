@page "/courses/edit"
@using Microsoft.EntityFrameworkCore
@using AbdHogwarts
@inject IDbContextFactory<HogwartsWeb.Data.HogwartsWebContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit Course</PageTitle>

<div class="page-container">
    <h1 class="page-title">Edit Course</h1>

    <hr />
    @if (Course is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <EditForm method="post" Model="Course" OnValidSubmit="UpdateCourse" FormName="edit" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <input type="hidden" name="Course.CourseId" value="@Course.CourseId" />

            <div class="mb-3">
                <label for="coursename" class="form-label">Course Name:</label>
                <InputText id="coursename" @bind-Value="Course.CourseName" class="form-control" />
                <ValidationMessage For="() => Course.CourseName" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Description:</label>
                <InputText id="description" @bind-Value="Course.Description" class="form-control" />
                <ValidationMessage For="() => Course.Description" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="professorid" class="form-label">Professor:</label>
                <InputSelect id="professor"
                             @bind-Value="Course.ProfessorId"
                             class="form-control">
                    <option value="">-- Select a Professor --</option>
                    @foreach (var prof in Professors)
                    {
                        <option value="@prof.ProfessorId">@prof.FirstName</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Course.ProfessorId" class="text-danger" />
            </div>

            <button type="submit" class="btn-create">Save</button>
            <a href="/courses" class="btn btn-secondary ms-2">Back to List</a>
        </EditForm>
    }
</div>

@code {
    [SupplyParameterFromQuery]
    private int CourseId { get; set; }

    [SupplyParameterFromForm]
    private Course? Course { get; set; }

    private List<Professor> Professors { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Course ??= await context.Course.FirstOrDefaultAsync(m => m.CourseId == CourseId);

        Professors = await context.Professor
                                 .OrderBy(p => p.FirstName)
                                 .ToListAsync();

        if (Course is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateCourse()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Course!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!CourseExists(Course!.CourseId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/courses");
    }

    private bool CourseExists(int courseid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Course.Any(e => e.CourseId == courseid);
    }
}
