@page "/courses/details"
@using Microsoft.EntityFrameworkCore
@using dnzHogwards
@inject IDbContextFactory<HogwartsWeb.Data.HogwartsWebContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Course Details</PageTitle>

<div class="page-container">
    <h1 class="page-title">Course Details</h1>

    <hr />

    @if (course is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-3">Course Name:</dt>
            <dd class="col-sm-9">@course.CourseName</dd>

            <dt class="col-sm-3">Description:</dt>
            <dd class="col-sm-9">@course.Description</dd>

            <dt class="col-sm-3">Professor:</dt>
            <dd class="col-sm-9">@course.ProfessorFullName</dd>
        </dl>

        <div class="mt-4">
            <h3>Enrolled Students</h3>
            @if (course.Enrollments != null && course.Enrollments.Any())
            {
                <ul class="list-group">
                    @foreach (var enrollment in course.Enrollments)
                    {
                        <li class="list-group-item">
                            @enrollment.Student.FirstName @enrollment.Student.LastName
                        </li>
                    }
                </ul>
            }
            else
            {
                <p><em>No students are currently enrolled in this course.</em></p>
            }
        </div>

        <div class="mt-3">
            <a href="@($"/courses/edit?courseid={course.CourseId}")" class="btn btn-primary me-2">Edit</a>
            <a href="/courses" class="btn btn-secondary">Back to List</a>
        </div>
    }
</div>

@code {
    private Course? course;

    [SupplyParameterFromQuery]
    private int CourseId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        course = await context.Course
                              .Include(c => c.Professor)
                              .Include(c => c.Enrollments)
                                  .ThenInclude(e => e.Student)
                              .FirstOrDefaultAsync(m => m.CourseId == CourseId);

        if (course is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}