@page "/courses/details"
@using Microsoft.EntityFrameworkCore
@using Hogwarts
@inject IDbContextFactory<HogwartsWeb.Data.HogwartsWebContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Course Details</h1>

<div>
    <hr />
    @if (course is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Course Name</dt>
            <dd class="col-sm-10">@course.CourseName</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@course.Description</dd>
            <dt class="col-sm-2">Professor Name</dt>
            <dd class="col-sm-10">@course.Professor.FirstName @course.Professor.LastName</dd>
        </dl>
        <div>
            <a href="@($"/courses/edit?courseid={course.CourseId}")">Edit</a> |
            <a href="@($"/courses")">Back to List</a>
        </div>
    }
</div>

@code {
    private Course? course;

    [SupplyParameterFromQuery]
    private int CourseId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        course = await context.Course.FirstOrDefaultAsync(m => m.CourseId == CourseId);
        context.Professor.ToList();

        if (course is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
