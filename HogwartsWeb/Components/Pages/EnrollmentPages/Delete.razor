@page "/enrollments/delete"
@using Microsoft.EntityFrameworkCore
@using Hogwarts
@inject IDbContextFactory<HogwartsWeb.Data.HogwartsWebContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Enrollment</h2>
    <hr />
    @if (enrollment is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">StudentId</dt>
            <dd class="col-sm-10">@enrollment.StudentId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CourseId</dt>
            <dd class="col-sm-10">@enrollment.CourseId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ProfessorId</dt>
            <dd class="col-sm-10">@enrollment.ProfessorId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">EnrollmentDate</dt>
            <dd class="col-sm-10">@enrollment.EnrollmentDate</dd>
        </dl>
        <EditForm method="post" Model="enrollment" OnValidSubmit="DeleteEnrollment" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(enrollment is null)">Delete</button> |
            <a href="/enrollments">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Enrollment? enrollment;

    [SupplyParameterFromQuery]
    private int EnrollmentId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        enrollment = await context.Enrollment.FirstOrDefaultAsync(m => m.EnrollmentId == EnrollmentId);

        if (enrollment is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteEnrollment()
    {
        using var context = DbFactory.CreateDbContext();
        context.Enrollment.Remove(enrollment!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/enrollments");
    }
}
