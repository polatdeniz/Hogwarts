@page "/enrollments/details"
@using Microsoft.EntityFrameworkCore
@using dnzHogwards
@inject IDbContextFactory<HogwartsWeb.Data.HogwartsWebContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Enrollment Details</PageTitle>

<div class="page-container">
    <h1 class="page-title">Enrollment Details</h1>

    <hr />
    @if (enrollment is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-3">Student ID:</dt>
            <dd class="col-sm-9">@enrollment.StudentId</dd>

            <dt class="col-sm-3">Course ID:</dt>
            <dd class="col-sm-9">@enrollment.CourseId</dd>

            <dt class="col-sm-3">Professor ID:</dt>
            <dd class="col-sm-9">@enrollment.ProfessorId</dd>

            <dt class="col-sm-3">Enrollment Date:</dt>
            <dd class="col-sm-9">@enrollment.EnrollmentDate.ToShortDateString()</dd>
        </dl>

        <div class="mt-3">
            <a href="@($"/enrollments/edit?enrollmentid={enrollment.EnrollmentId}")" class="btn btn-primary me-2">Edit</a>
            <a href="/enrollments" class="btn btn-secondary">Back to List</a>
        </div>
    }
</div>

@code {
    private Enrollment? enrollment;

    [SupplyParameterFromQuery]
    private int EnrollmentId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        enrollment = await context.Enrollment.FirstOrDefaultAsync(m => m.EnrollmentId == EnrollmentId);

        if (enrollment is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
