@page "/houses/delete"
@using Microsoft.EntityFrameworkCore
@using dnzHogwards
@inject IDbContextFactory<HogwartsWeb.Data.HogwartsWebContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete House</PageTitle>

<div class="page-container">
    <h1 class="page-title">Delete House</h1>

    <p>Are you sure you want to delete this house?</p>
    <hr />

    @if (house is null)
    {
            <p><em>Loading...</em></p>
    }
    else
    {
            <dl class="row">
                <dt class="col-sm-3">House Name:</dt>
                <dd class="col-sm-9">@house.HouseName</dd>

                <dt class="col-sm-3">Founder:</dt>
                <dd class="col-sm-9">@house.Founder</dd>

                <dt class="col-sm-3">Symbol:</dt>
                <dd class="col-sm-9">@house.Symbol</dd>

                <dt class="col-sm-3">Colors:</dt>
                <dd class="col-sm-9">@house.Colors</dd>
            </dl>

       
                            <EditForm Model="house" OnValidSubmit="DeleteHouse" FormName="deleteHouseForm">
            <button type="submit" class="btn btn-danger me-2">Delete</button>
            <a href="/houses" class="btn btn-secondary">Back to List</a>
        </EditForm>
        
    }
</div>

@code {
    private House? house;
   

    [SupplyParameterFromQuery]
    private int HouseId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();

        house = await context.House.FirstOrDefaultAsync(h => h.HouseId == HouseId);

        if (house is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

       
    }
    private async Task DeleteHouse()
    {
        using var context = DbFactory.CreateDbContext();

        // Silinmek üzere olan house'u bul
        var houseToDelete = await context.House.FindAsync(HouseId);
        if (houseToDelete is null)
        {
            NavigationManager.NavigateTo("/houses");
            return;
        }

        // Mevcut, silinmeyecek HouseId'lerden rastgele birini seç
        var otherHouseIds = await context.House
            .Where(h => h.HouseId != HouseId)
            .Select(h => h.HouseId)
            .ToListAsync();

        if (!otherHouseIds.Any())
        {
            // Hiç başka house yoksa silme işlemi yapılamaz, geri dön
            // Gerekirse kullanıcıya mesaj göster
            return;
        }

        // Rastgele geçerli HouseId seç
        var random = new Random();
        var newHouseId = otherHouseIds[random.Next(otherHouseIds.Count)];

        // Öğrencilerin HouseId'sini güncelle
        var studentsToUpdate = await context.Student
            .Where(s => s.HouseId == HouseId)
            .ToListAsync();

        foreach (var student in studentsToUpdate)
        {
            student.HouseId = newHouseId;
        }

        // Profesörlerin HouseId'sini güncelle
        var professorsToUpdate = await context.Professor
            .Where(p => p.HouseId == HouseId)
            .ToListAsync();

        foreach (var professor in professorsToUpdate)
        {
            professor.HouseId = newHouseId;
        }

        // House'u sil
        context.House.Remove(houseToDelete);

        await context.SaveChangesAsync();

        NavigationManager.NavigateTo("/houses");
    }

}
