@page "/houses/delete"
@using Microsoft.EntityFrameworkCore
@using AbdHogwarts
@inject IDbContextFactory<HogwartsWeb.Data.HogwartsWebContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete House</PageTitle>

<div class="page-container">
    <h1 class="page-title">Delete House</h1>

    <p>Are you sure you want to delete this house?</p>
    <hr />

    @if (house is null)
    {
            <p><em>Loading...</em></p>
    }
    else
    {
            <dl class="row">
                <dt class="col-sm-3">House Name:</dt>
                <dd class="col-sm-9">@house.HouseName</dd>

                <dt class="col-sm-3">Founder:</dt>
                <dd class="col-sm-9">@house.Founder</dd>

                <dt class="col-sm-3">Symbol:</dt>
                <dd class="col-sm-9">@house.Symbol</dd>

                <dt class="col-sm-3">Colors:</dt>
                <dd class="col-sm-9">@house.Colors</dd>
            </dl>

        @if (hasStudents)
        {
                    <div class="alert alert-warning">
                        This house has student(s) assigned. Please move the students to another house before deleting.
                    </div>
                    <a href="/houses" class="btn btn-secondary">Back to List</a>
        }
        else
        {
                            <EditForm Model="house" OnValidSubmit="DeleteHouse" FormName="deleteHouseForm">
            <button type="submit" class="btn btn-danger me-2">Delete</button>
            <a href="/houses" class="btn btn-secondary">Back to List</a>
        </EditForm>
        }
    }
</div>

@code {
    private House? house;
    private bool hasStudents = false;

    [SupplyParameterFromQuery]
    private int HouseId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();

        house = await context.House.FirstOrDefaultAsync(h => h.HouseId == HouseId);

        if (house is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        hasStudents = await context.Student.AnyAsync(s => s.HouseId == HouseId);
    }

    private async Task DeleteHouse()
    {
        using var context = DbFactory.CreateDbContext();

        var houseToDelete = await context.House.FindAsync(HouseId);
        if (houseToDelete is not null)
        {
            context.House.Remove(houseToDelete);
            await context.SaveChangesAsync();
        }

        NavigationManager.NavigateTo("/houses");
    }
}
