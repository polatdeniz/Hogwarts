@page "/houses/delete"
@using Microsoft.EntityFrameworkCore
@using Hogwarts
@inject IDbContextFactory<HogwartsWeb.Data.HogwartsWebContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete House</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <hr />
    @if (house is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">House Name</dt>
            <dd class="col-sm-10">@house.HouseName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Founder</dt>
            <dd class="col-sm-10">@house.Founder</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Symbol</dt>
            <dd class="col-sm-10">@house.Symbol</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Colors</dt>
            <dd class="col-sm-10">@house.Colors</dd>
        </dl>
        <EditForm method="post" Model="house" OnValidSubmit="DeleteHouse" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(house is null)">Delete</button> |
            <a href="/houses">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private House? house;

    [SupplyParameterFromQuery]
    private int HouseId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        house = await context.House.FirstOrDefaultAsync(m => m.HouseId == HouseId);

        if (house is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteHouse()
    {
        using var context = DbFactory.CreateDbContext();
        context.House.Remove(house!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/houses");
    }
}
