@page "/houses/details"
@using Microsoft.EntityFrameworkCore
@using Hogwarts
@inject IDbContextFactory<HogwartsWeb.Data.HogwartsWebContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>House</h2>
    <hr />
    @if (house is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">HouseName</dt>
            <dd class="col-sm-10">@house.HouseName</dd>
            <dt class="col-sm-2">Founder</dt>
            <dd class="col-sm-10">@house.Founder</dd>
            <dt class="col-sm-2">Symbol</dt>
            <dd class="col-sm-10">@house.Symbol</dd>
            <dt class="col-sm-2">Colors</dt>
            <dd class="col-sm-10">@house.Colors</dd>
        </dl>
        <div>
            <a href="@($"/houses/edit?houseid={house.HouseId}")">Edit</a> |
            <a href="@($"/houses")">Back to List</a>
        </div>
    }
</div>

@code {
    private House? house;

    [SupplyParameterFromQuery]
    private int HouseId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        house = await context.House.FirstOrDefaultAsync(m => m.HouseId == HouseId);

        if (house is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
