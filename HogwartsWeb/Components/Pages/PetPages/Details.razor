@page "/pets/details"
@using Microsoft.EntityFrameworkCore
@using dnzHogwards
@using HogwartsWeb.Data
@inject IDbContextFactory<HogwartsWebContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Pet Details</PageTitle>

<div class="page-container">
    <h1 class="page-title">Pet Details</h1>
    <hr />

    @if (pet is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-3">Pet Name:</dt>
            <dd class="col-sm-9">@pet.PetName</dd>

            <dt class="col-sm-3">Species:</dt>
            <dd class="col-sm-9">@pet.Species</dd>

            <dt class="col-sm-3">Student Owner:</dt>
            <dd class="col-sm-9">
                @(pet.Student is not null 
                    ? $"{pet.Student.FirstName} {pet.Student.LastName}" 
                    : "(No Student)")
            </dd>

            <dt class="col-sm-3">Professor Owner:</dt>
            <dd class="col-sm-9">
                @(pet.Professor is not null 
                    ? $"{pet.Professor.FirstName} {pet.Professor.LastName}" 
                    : "(No Professor)")
            </dd>
        </dl>

        <div class="mt-3">
            <a href="@($"/pets/edit?petid={pet.PetId}")" class="btn btn-primary me-2">Edit</a>
            <a href="/pets" class="btn btn-secondary">Back to List</a>
        </div>
    }
</div>

@code {
    private Pet? pet;

    [SupplyParameterFromQuery]
    private int PetId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        pet = await context.Pet
            .Include(p => p.Student)
            .Include(p => p.Professor)
            .FirstOrDefaultAsync(m => m.PetId == PetId);

        if (pet is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
