@page "/spells/delete"
@using Microsoft.EntityFrameworkCore
@using AbdHogwarts
@inject IDbContextFactory<HogwartsWeb.Data.HogwartsWebContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete Spell</PageTitle>

<div class="page-container">
    <h1 class="page-title">Delete Spell</h1>

    <p class="mb-3"><strong>Are you sure you want to delete this spell?</strong></p>
    <hr />

    @if (spell is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-3">Spell Name:</dt>
            <dd class="col-sm-9">@spell.SpellName</dd>

            <dt class="col-sm-3">Effect:</dt>
            <dd class="col-sm-9">@spell.Effect</dd>

            <dt class="col-sm-3">Required Level:</dt>
            <dd class="col-sm-9">@spell.RequiredLevel</dd>
        </dl>

        <EditForm method="post" Model="spell" OnValidSubmit="DeleteSpell" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger me-2" disabled="@(spell is null)">Delete</button>
            <a href="/spells" class="btn btn-secondary">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Spell? spell;

    [SupplyParameterFromQuery]
    private int SpellId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        spell = await context.Spell.FirstOrDefaultAsync(m => m.SpellId == SpellId);

        if (spell is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteSpell()
    {
        using var context = DbFactory.CreateDbContext();
        context.Spell.Remove(spell!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/spells");
    }
}
