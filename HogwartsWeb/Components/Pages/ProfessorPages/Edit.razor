@page "/professors/edit"
@using Microsoft.EntityFrameworkCore
@using Hogwarts
@inject IDbContextFactory<HogwartsWeb.Data.HogwartsWebContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Professor</h2>
<hr />
@if (Professor is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Professor" OnValidSubmit="UpdateProfessor" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Professor.ProfessorId" value="@Professor.ProfessorId" />
                <div class="mb-3">
                    <label for="firstname" class="form-label">FirstName:</label>
                    <InputText id="firstname" @bind-Value="Professor.FirstName" class="form-control" />
                    <ValidationMessage For="() => Professor.FirstName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="lastname" class="form-label">LastName:</label>
                    <InputText id="lastname" @bind-Value="Professor.LastName" class="form-control" />
                    <ValidationMessage For="() => Professor.LastName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="specialty" class="form-label">Specialty:</label>
                    <InputText id="specialty" @bind-Value="Professor.Specialty" class="form-control" />
                    <ValidationMessage For="() => Professor.Specialty" class="text-danger" />
                </div>
            
                <div class="mb-3">
                    <label for="houseid" class="form-label">House:</label>
                    <InputSelect id="house"
                             @bind-Value="Professor.HouseId"
                             class="form-control">
                    <option value="">-- Select a House --</option>
                    @foreach (var house in Houses)
                    {
                        <option value="@house.HouseId">@house.HouseName</option>
                    }
                </InputSelect>
                    <ValidationMessage For="() => Professor.HouseId" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/professors">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int ProfessorId { get; set; }

    [SupplyParameterFromForm]
    private Professor? Professor { get; set; }

    private List<House> Houses { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Professor ??= await context.Professor.FirstOrDefaultAsync(m => m.ProfessorId == ProfessorId);
        Houses = await context.House
                                 .OrderBy(p => p.HouseName)
                                 .ToListAsync();

        if (Professor is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateProfessor()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Professor!).State = EntityState.Modified;
        

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ProfessorExists(Professor!.ProfessorId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/professors");
    }

    private bool ProfessorExists(int professorid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Professor.Any(e => e.ProfessorId == professorid);
    }
}
