@page "/professors/details"
@using Microsoft.EntityFrameworkCore
@using Hogwarts
@inject IDbContextFactory<HogwartsWeb.Data.HogwartsWebContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Professor</h2>
    <hr />
    @if (professor is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">FirstName</dt>
            <dd class="col-sm-10">@professor.FirstName</dd>
            <dt class="col-sm-2">LastName</dt>
            <dd class="col-sm-10">@professor.LastName</dd>
            <dt class="col-sm-2">Specialty</dt>
            <dd class="col-sm-10">@professor.Specialty</dd>
            <dt class="col-sm-2">Level</dt>
            <dd class="col-sm-10">@professor.Level</dd>
            <dt class="col-sm-2">HouseId</dt>
            <dd class="col-sm-10">@professor.HouseId</dd>
        </dl>
        <div>
            <a href="@($"/professors/edit?professorid={professor.ProfessorId}")">Edit</a> |
            <a href="@($"/professors")">Back to List</a>
        </div>
    }
</div>

@code {
    private Professor? professor;

    [SupplyParameterFromQuery]
    private int ProfessorId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        professor = await context.Professor.FirstOrDefaultAsync(m => m.ProfessorId == ProfessorId);

        if (professor is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
