@page "/professors/details"
@using Microsoft.EntityFrameworkCore
@using AbdHogwarts
@inject IDbContextFactory<HogwartsWeb.Data.HogwartsWebContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Professor Details</PageTitle>

<div class="page-container">
    <h1 class="page-title">Professor Details</h1>

    <hr />
    @if (professor is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-3">First Name:</dt>
            <dd class="col-sm-9">@professor.FirstName</dd>

            <dt class="col-sm-3">Last Name:</dt>
            <dd class="col-sm-9">@professor.LastName</dd>

            <dt class="col-sm-3">Specialty:</dt>
            <dd class="col-sm-9">@professor.Specialty</dd>

            <dt class="col-sm-3">Level:</dt>
            <dd class="col-sm-9">@professor.Level</dd>

            <dt class="col-sm-3">House:</dt>
            <dd class="col-sm-9">@professor.House?.HouseName</dd>
        </dl>

        <div class="mt-3">
            <a href="@($"/professors/edit?professorid={professor.ProfessorId}")" class="btn btn-primary me-2">Edit</a>
            <a href="/professors" class="btn btn-secondary">Back to List</a>
        </div>

        <hr />
        <h3 class="mt-4">Taught Courses</h3>

        @if (taughtCourses.Count == 0)
        {
            <p>This professor hasn't been assigned to any courses.</p>
        }
        else
        {
            <ul class="list-group mt-2">
                @foreach (var course in taughtCourses)
                {
                    <li class="list-group-item">
                        <strong>@course.CourseName</strong> — @course.Description
                    </li>
                }
            </ul>
        }

        <hr />
        <h4 class="mt-4">Pets</h4>

        @if (!pets.Any())
        {
            <p>This professor has no pets.</p>
        }
        else
        {
            <ul class="list-group mt-2">
                @foreach (var pet in pets)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            <strong>@pet.PetName</strong> — @pet.Species
                        </div>
                    </li>
                }
            </ul>
        }

        <button class="btn btn-primary mt-3" @onclick="() => showPetModal = true">Add New Pet</button>

        @if (showPetModal)
        {
            <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Add New Pet</h5>
                            <button type="button" class="btn-close" @onclick="() => showPetModal = false"></button>
                        </div>
                        <div class="modal-body">
                            <div class="mb-3">
                                <label class="form-label">Pet Name</label>
                                <input class="form-control" @bind="newPetName" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Species</label>
                                <input class="form-control" @bind="newPetSpecies" />
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button class="btn btn-secondary" @onclick="() => showPetModal = false">Cancel</button>
                            <button class="btn btn-success" @onclick="AddPet">Add</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    private Professor? professor;
    private List<Course> taughtCourses = new();
    private List<Pet> pets = new();

    private bool showPetModal = false;
    private string newPetName = string.Empty;
    private string newPetSpecies = string.Empty;

    [SupplyParameterFromQuery]
    private int ProfessorId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();

        professor = await context.Professor
                        .Include(m => m.House)
                        .FirstOrDefaultAsync(m => m.ProfessorId == ProfessorId);

        if (professor is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        taughtCourses = await context.Course
            .Where(c => c.ProfessorId == professor.ProfessorId)
            .ToListAsync();

        pets = await context.Pet
            .Where(p => p.ProfessorId == professor.ProfessorId)
            .ToListAsync();
    }

    private async Task AddPet()
    {
        Console.WriteLine("AddPet called");

        if (string.IsNullOrWhiteSpace(newPetName) || string.IsNullOrWhiteSpace(newPetSpecies) || professor is null)
        {
            Console.WriteLine("Validation failed");
            return;
        }

        using var context = DbFactory.CreateDbContext();

        var pet = new Pet
            {
                PetName = newPetName,
                Species = newPetSpecies,
                ProfessorId = professor.ProfessorId
            };

        context.Pet.Add(pet);
        await context.SaveChangesAsync();

        Console.WriteLine("Pet saved");

        showPetModal = false;
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

}
