@page "/students/edit"
@using Microsoft.EntityFrameworkCore
@using dnzHogwards
@inject IDbContextFactory<HogwartsWeb.Data.HogwartsWebContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit Student</PageTitle>

<div class="page-container">
    <h1 class="page-title">Edit Student</h1>

    @if (Student is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <EditForm method="post" Model="Student" OnValidSubmit="UpdateStudent" FormName="edit" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary role="alert" class="text-danger" />

            <input type="hidden" name="Student.StudentId" value="@Student.StudentId" />

            <div class="mb-3">
                <label for="firstname" class="form-label">First Name:</label>
                <InputText id="firstname" @bind-Value="Student.FirstName" class="form-control" />
                <ValidationMessage For="() => Student.FirstName" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="lastname" class="form-label">Last Name:</label>
                <InputText id="lastname" @bind-Value="Student.LastName" class="form-control" />
                <ValidationMessage For="() => Student.LastName" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="level" class="form-label">Level:</label>
                <InputNumber id="level" @bind-Value="Student.Level" class="form-control" />
                <ValidationMessage For="() => Student.Level" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="houseid" class="form-label">House:</label>
                <InputSelect id="house" @bind-Value="Student.HouseId" class="form-control">
                    <option value="">-- Select a House --</option>
                    @foreach (var house in Houses)
                    {
                        <option value="@house.HouseId">@house.HouseName</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Student.HouseId" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary">Save</button>
            <a class="btn btn-link" href="/students">Cancel</a>
        </EditForm>
    }
</div>

@code {
    [SupplyParameterFromQuery]
    private int StudentId { get; set; }

    [SupplyParameterFromForm]
    private Student? Student { get; set; }
    private List<House> Houses { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Student ??= await context.Student.FirstOrDefaultAsync(m => m.StudentId == StudentId);

        Houses = await context.House
            .OrderBy(p => p.HouseName)
            .ToListAsync();

        if (Student is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateStudent()
    {
        using var context = DbFactory.CreateDbContext();

        var existingStudent = await context.Student.FirstOrDefaultAsync(s => s.StudentId == Student!.StudentId);

        if (existingStudent is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        // Sadece değiştirilen alanları güncelle
        existingStudent.FirstName = Student.FirstName;
        existingStudent.LastName = Student.LastName;
        existingStudent.Level = Student.Level;
        existingStudent.HouseId = Student.HouseId;

        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/students");
    }


    private bool StudentExists(int studentid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Student.Any(e => e.StudentId == studentid);
    }
}
